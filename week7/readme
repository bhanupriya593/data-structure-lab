Problem Statement: Write a C program that implement Queue and its operations using 
A. Arrays  
B. Pointers
Operations
i) Enqueue  
ii) Dequeue    
iii)Is_Queue_Full   
iv)Is_Queue_Empty

Queue_using_array.c

#include<stdio.h>
#include<stdlib.h>
#define maxsize 5
int f=-1,r=-1,queue[maxsize];

int isfull()
{
	if(r ==  maxsize -1)
		return 1;
	else
		return 0;
}
int isempty()
{
	if(f == -1)
		return 1;
	else
		return 0;
}
void enqueue(int data)
{
	if(f == -1)
		f = 0;
	queue[++r] = data;
}
int dequeue()
{
		return(queue[f++]);
	if(f==r)		
		f=r=-1;
}
void display()
{
	for(int i=f;i<=r;i++)
		printf("%d\t",queue[i]);
}
int main()
{
	int ch,x;
	while(1)
	{
		printf("\n1-enqueue\n2-dequeue\n3-display\n4-exit\n");
		printf("Enter your choice\n");
		scanf("%d",&ch);
	switch(ch)
	{
		case 1:if(isfull())
			printf("Queuue overflow\n");
		else
		{
			printf("Enter data to be inserted\n");
			scanf("%d",&x);
			enqueue(x);
		}
		break;
		case 2: if(isempty())
				printf("Queue underflow\n");
			else
				printf("Deleted element is %d\n",dequeue());
			if(f==r)		
				f=r=-1;
			break;
		case 3: display();
			break;
		case 4:exit(0);
		}
	}
}

Queue_using_sll.c

#include<stdio.h>
#include<stdlib.h>
int i,n;
struct node
{
	int data;
	struct node*link;
};
struct node* f = NULL,*r = NULL,*cur;
void enqueue()
{
	cur = (struct node*)malloc(sizeof(struct node));
	printf("Enter value to insert\n");
	scanf("%d",&(cur->data));
	cur->link = NULL;
	if(f==NULL)
		f = r = cur;
	else
	{
		r->link = cur;
		r = cur;
	}
}
void dequeue()
{
	if(f == NULL)
		printf("Queue underflow\n");
	else if(f == r)
	{
		printf("Deleted element is %d\n",f->data);
		f=r=NULL;
	}
	else
	{
		cur = f;
		f = f->link;
		printf("Deleted element is %d\n",cur->data);
		free(cur);
	}
}
void display()
{
	if(f == NULL)
		printf("Queue is empty\n");
	else
	{
		cur = f;
		while(cur != NULL)
		{
			printf("%d->",cur->data);
			cur = cur->link;
		}
	}
}
int main()
{
	int ch;
	while(1)
	{
		printf("\n1-enqueue\n2-dequeue\n3-display\n4-exit\n");
		printf("Enter your choice\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1: enqueue();
				break;
			case 2: dequeue();
				break;
			case 3: display();
				break;
			case 4: exit(0);
				break;
		}
	}
}
